"""add agentic infra

Revision ID: 625753cf7cf8
Revises: 14d5d6cdae7a
Create Date: 2025-09-23 11:37:29.619087

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from pgvector.sqlalchemy import Vector

# revision identifiers, used by Alembic.
revision: str = '625753cf7cf8'
down_revision: Union[str, Sequence[str], None] = '14d5d6cdae7a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Enable pgvector extension first
    op.execute('CREATE EXTENSION IF NOT EXISTS vector')
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organizations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_organizations_id'), 'organizations', ['id'], unique=False)
    op.create_index(op.f('ix_organizations_name'), 'organizations', ['name'], unique=False)
    op.create_table('agent_runs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('trace_id', sa.String(length=255), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('plan_snapshot', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tool_log', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('final_result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('cost_usd', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_agent_runs_id'), 'agent_runs', ['id'], unique=False)
    op.create_index(op.f('ix_agent_runs_org_id'), 'agent_runs', ['org_id'], unique=False)
    op.create_index(op.f('ix_agent_runs_trace_id'), 'agent_runs', ['trace_id'], unique=False)
    op.create_index(op.f('ix_agent_runs_user_id'), 'agent_runs', ['user_id'], unique=False)
    op.create_table('refresh_tokens',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('jti', sa.String(length=255), nullable=False),
    sa.Column('token_hash', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('is_revoked', sa.Boolean(), nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('used_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_refresh_tokens_id'), 'refresh_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_jti'), 'refresh_tokens', ['jti'], unique=True)
    op.create_index(op.f('ix_refresh_tokens_user_id'), 'refresh_tokens', ['user_id'], unique=False)
    op.create_table('itineraries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('destination', sa.String(length=255), nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('budget_usd', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('total_cost_usd', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('itinerary_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('constraints', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('citations', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tools_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('decisions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('agent_run_id', sa.UUID(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['agent_run_id'], ['agent_runs.id'], ),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_itineraries_id'), 'itineraries', ['id'], unique=False)
    op.create_index(op.f('ix_itineraries_org_id'), 'itineraries', ['org_id'], unique=False)
    op.create_index(op.f('ix_itineraries_user_id'), 'itineraries', ['user_id'], unique=False)
    op.create_table('embeddings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('knowledge_item_id', sa.UUID(), nullable=False),
    sa.Column('chunk_idx', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('embedding', Vector(1536), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['knowledge_item_id'], ['knowledge_base.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_embeddings_id'), 'embeddings', ['id'], unique=False)
    op.create_index(op.f('ix_embeddings_knowledge_item_id'), 'embeddings', ['knowledge_item_id'], unique=False)
    op.add_column('destinations', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('destinations', sa.Column('org_id', sa.UUID(), nullable=False))
    op.add_column('destinations', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('destinations', sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.create_index(op.f('ix_destinations_org_id'), 'destinations', ['org_id'], unique=False)
    op.create_foreign_key('fk_destinations_org_id', 'destinations', 'organizations', ['org_id'], ['id'])
    op.add_column('knowledge_base', sa.Column('title', sa.String(length=500), nullable=False))
    op.add_column('knowledge_base', sa.Column('source_type', sa.String(length=50), nullable=False))
    op.add_column('knowledge_base', sa.Column('source_ref', sa.Text(), nullable=True))
    op.add_column('knowledge_base', sa.Column('org_id', sa.UUID(), nullable=False))
    op.add_column('knowledge_base', sa.Column('scope', sa.String(length=20), nullable=False))
    op.add_column('knowledge_base', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('knowledge_base', sa.Column('is_processed', sa.Boolean(), nullable=False))
    op.alter_column('knowledge_base', 'destination_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_index(op.f('ix_knowledge_base_org_id'), 'knowledge_base', ['org_id'], unique=False)
    op.create_foreign_key('fk_knowledge_base_org_id', 'knowledge_base', 'organizations', ['org_id'], ['id'])
    op.add_column('users', sa.Column('org_id', sa.UUID(), nullable=False))
    op.add_column('users', sa.Column('role', sa.String(length=20), nullable=False))
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('users', sa.Column('failed_login_attempts', sa.Integer(), nullable=False))
    op.add_column('users', sa.Column('locked_until', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('users', sa.Column('last_login_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.create_index(op.f('ix_users_org_id'), 'users', ['org_id'], unique=False)
    op.create_foreign_key('fk_users_org_id', 'users', 'organizations', ['org_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('fk_users_org_id', 'users', type_='foreignkey')
    op.drop_index(op.f('ix_users_org_id'), table_name='users')
    op.drop_column('users', 'last_login_at')
    op.drop_column('users', 'locked_until')
    op.drop_column('users', 'failed_login_attempts')
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'role')
    op.drop_column('users', 'org_id')
    op.drop_constraint('fk_knowledge_base_org_id', 'knowledge_base', type_='foreignkey')
    op.drop_index(op.f('ix_knowledge_base_org_id'), table_name='knowledge_base')
    op.alter_column('knowledge_base', 'destination_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_column('knowledge_base', 'is_processed')
    op.drop_column('knowledge_base', 'is_active')
    op.drop_column('knowledge_base', 'scope')
    op.drop_column('knowledge_base', 'org_id')
    op.drop_column('knowledge_base', 'source_ref')
    op.drop_column('knowledge_base', 'source_type')
    op.drop_column('knowledge_base', 'title')
    op.drop_constraint('fk_destinations_org_id', 'destinations', type_='foreignkey')
    op.drop_index(op.f('ix_destinations_org_id'), table_name='destinations')
    op.drop_column('destinations', 'deleted_at')
    op.drop_column('destinations', 'is_active')
    op.drop_column('destinations', 'org_id')
    op.drop_column('destinations', 'description')
    op.drop_index(op.f('ix_embeddings_knowledge_item_id'), table_name='embeddings')
    op.drop_index(op.f('ix_embeddings_id'), table_name='embeddings')
    op.drop_table('embeddings')
    op.drop_index(op.f('ix_itineraries_user_id'), table_name='itineraries')
    op.drop_index(op.f('ix_itineraries_org_id'), table_name='itineraries')
    op.drop_index(op.f('ix_itineraries_id'), table_name='itineraries')
    op.drop_table('itineraries')
    op.drop_index(op.f('ix_refresh_tokens_user_id'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_jti'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_id'), table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_index(op.f('ix_agent_runs_user_id'), table_name='agent_runs')
    op.drop_index(op.f('ix_agent_runs_trace_id'), table_name='agent_runs')
    op.drop_index(op.f('ix_agent_runs_org_id'), table_name='agent_runs')
    op.drop_index(op.f('ix_agent_runs_id'), table_name='agent_runs')
    op.drop_table('agent_runs')
    op.drop_index(op.f('ix_organizations_name'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_id'), table_name='organizations')
    op.drop_table('organizations')
    # ### end Alembic commands ###
